---
import type { offeringItem } from "@/types/types";
interface Props extends offeringItem {}
import type { ImageMetadata } from "astro";
import { Image } from "astro:assets";
import Disclaimer from "./shared/Disclaimer.astro";
import Button from "./shared/Button.astro";

const { image, alt, title, description, priceCLP, id, youtubeLink } =
	Astro.props;

const images = import.meta.glob<{ default: ImageMetadata }>(
	"/src/assets/offerings/*.{jpeg,jpg,png,gif}"
);

if (!images[image])
	throw new Error(
		`"${image}" does not exist in glob: "src/assets/offerings/*.{jpeg,jpg,png,gif}"`
	);

// Inicio bloque cálculo conversión de precio a dolar con envío internacional incluido

const interShippingCLP = 30000; // Costo de envío internacional en pesos chilenos
const changeDolarCLP = 900; // Tipo de cambio en pesos chilenos

// Convertir el precio y el costo de envío a dólares
const priceUSD = priceCLP / changeDolarCLP; // Precio en dólares
const interShippingUSD = interShippingCLP / changeDolarCLP; // Costo de envío en dólares

// Calcular el precio total en dólares sumando el precio y el costo de envío
let totalUSD = priceUSD + interShippingUSD;

// Redondear el precio total en dólares hacia arriba si la parte decimal es mayor o igual a 0.5
totalUSD = Math.ceil(totalUSD);

// Formatear el precio total en dólares
const formattedTotalUSD = totalUSD.toFixed(0); // No especificar decimales para mostrar el número entero redondeado hacia arriba

// fin bloque cálculo conversión de precio a dolar con envío internacional incluido
---

<div class="Offering" id={id}>
	<div class="OfferingImageBox">
		<Image
			src={images[image]()}
			alt={alt}
			width={400}
			height={500}
			class="Offering-image"
		/>
	</div>
	<div class="Offering-text">
		<h1 class="Offering-title">{title}</h1>
		<p class="Offering-description">{description}</p>
		<div class="Offering-price">
			<span class="CLP">CLP $</span>
			{priceCLP}
		</div>

		<div class="Offering-price">
			<span class="CLP">USD $</span>
			{formattedTotalUSD}
		</div>

		<div class="Disclaimer">
			<Disclaimer />
		</div>

		<div class="Offering-buttons">
			<Button
				link={youtubeLink}
				buttonText="Mírala en YouTube"
				classes="Button Button-primary Button-sm"
			/>
			<Button
				link={"/contact"}
				buttonText="Contáctame"
				classes="Button Button-sm"
			/>
		</div>
	</div>
</div>

<style lang="scss">
	.Offering {
		display: flex;
		flex-flow: column nowrap;
		background-color: var(--uiGrayDark);
		height: fit-content;
		color: whitesmoke;
		gap: 0.5em;
		border-radius: 0.5em;
		overflow: hidden;
		flex-grow: 1;
		justify-content: center;
		text-align: left;
		line-height: 1.2;
		min-width: 18em;

		.OfferingImageBox {
			overflow: hidden;
		}

		&-image {
			aspect-ratio: 4/5;
			object-fit: cover;
			transition: all ease 0.3s;
			display: block;
			width: 400px;
			height: 500px;

			&:hover {
				scale: 1.1;
				overflow: hidden;
			}
		}
		&-text {
			padding: 1em;
			display: flex;
			flex-flow: column nowrap;
			gap: 1em;
			font-size: 14px;
		}
		&-title {
			margin: 0;
			font-size: 1.2rem;
			font-weight: bolder;
		}
		&-description {
			margin: 0;
			font-size: 1rem;
		}
		&-price {
			font-size: 1.5rem;
			font-weight: bold;
			display: flex;
			align-items: center;
			gap: 0.3em;
			margin: 0;
		}
		.CLP {
			font-weight: 400;
			font-size: 0.8rem;
		}

		&-buttons {
			display: flex;
			gap: 1em;
			justify-content: flex-start;
		}
	}
</style>
